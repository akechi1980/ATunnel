package com.szming.utils;

import java.io.UnsupportedEncodingException;
import java.security.Key;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class Utils {

	public static String bytes2HexString(byte[] b) {
		String ret = "";
		for (int i = 0; i < b.length; i++) {
			String hex = Integer.toHexString(b[i] & 0xFF);
			if (hex.length() == 1) {
				hex = '0' + hex;
			}
			ret += hex.toUpperCase();
		}
		return ret;
	}


	
	public static byte[] getSha1(String message) {
		byte[] key = null;
		try {
			key = (message).getBytes("UTF-8");
			MessageDigest sha = MessageDigest.getInstance("SHA-1");
			key = sha.digest(key);
//			System.out.println(Utils.bytes2HexString(key));
			key = Arrays.copyOf(key, 16); // use only first 128 bit
//			System.out.println(Utils.bytes2HexString(key));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return key;
	}
	
	
    /**
     * Encrypts data.
     * @param plainText
     *   Data to encrypt.
     * @return
     *   Encrypted data.
     * @throws Exception
     *   If something went wrong.
     */
    public static byte[] encrypt(String plainText){
    	Cipher cipher;
    	cipher = Cipher.getInstance("PBEWithMD5AndDES");
    	String secretKey = "123456789";
    	
        byte[] encrypted = new byte[plainText.getBytes().length];
        
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, this.paramSpec);
        encrypted = cipher.doFinal(plainText.getBytes());
        return encrypted;
    }
    
    
    /**
     * Decrypts data.
     * @param cipherText
     *   Data to decrypt.
     * @return
     *   Decrypted data.
     * @throws Exception
     *   If something went wrong.
     */
    public static String decrypt(byte[] cipherText) throws Exception {
    	
    	Cipher cipher;
    	cipher = Cipher.getInstance("PBEWithMD5AndDES");
    	String secretKey = "123456789";
    	
        byte[] decryptedText = new byte[cipherText.length];
        String decrypted;
        
        cipher.init(Cipher.DECRYPT_MODE, secretKey, this.paramSpec);
        decryptedText = cipher.doFinal(cipherText);
        decrypted = new String(decryptedText);
        return decrypted;
    }
    
}
