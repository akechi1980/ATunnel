package com.szming.Framesets;

import java.nio.charset.Charset;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.util.Arrays;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import com.szming.utils.Config;
import com.szming.utils.TunnelUtils;
import com.szming.utils.JsonParser.PackageDataChkHeadFormat;
import com.szming.utils.JsonParser.PackageHeadFormat;

public class CustomPackage{
	
	EventHandler iEventHandler;
	//メモリに保存されている情報リスト
	byte[] ReadCacheBuffer;
	
	byte[] PackageHead;
	byte[] PackageDataChkHead;

    String PackageDiffMode = "PackageDiff";   //PackageSize,PackageSizeLE
    int PackageSizeStarPos = 0;
    int PackageOffset = 0;
	

	
    public byte[] mkPackageHead(){
    	
    	byte[] PackageHead = new byte[Config.mSettingConfig.PackageHeadLength()];    	
    	Arrays.fill(PackageHead,(byte)0);
    	
        for (int i = 0;i<Config.mSettingConfig.PackageHeadFormat.length;i++){
        	PackageHeadFormat itemObj = (PackageHeadFormat) Config.mSettingConfig.PackageHeadFormat[i];
    		
            if(itemObj.type.equals("String")){
            	
            	byte[] byteArray = itemObj.contents.getBytes(Charset.forName("utf8"));
            	System.arraycopy(byteArray, 0, PackageHead, itemObj.startPos, (byteArray.length < itemObj.length ? byteArray.length:itemObj.length)); 

            	
            }else if(itemObj.type.equals("PackageSize")){
                this.PackageDiffMode = "PackageSize";   
                this.PackageSizeStarPos =  itemObj.startPos;
                
            }else if(itemObj.type.equals("PackageSizeLE")){
                this.PackageDiffMode = "PackageSizeLE"; 
                this.PackageSizeStarPos =  itemObj.startPos;
            }else if(itemObj.type.equals("Num")){
//                PackageHead.writeFloatBE(Config.PackageHeadFormat[i].contents,
//                    Config.PackageHeadFormat[i].startPos,
//                    Config.PackageHeadFormat[i].length);
            }

        }

        return PackageHead;
    }

    public byte[] mkPackageDataChkHead(){
    	byte[] PackageDataChkHead = new byte[Config.mSettingConfig.PackageDataChkHeadLength()];    	
    	Arrays.fill(PackageDataChkHead,(byte)0);

    	for (int i = 0;i<Config.mSettingConfig.PackageDataChkHeadFormat.length;i++){
    		
    		PackageDataChkHeadFormat itemObj = (PackageDataChkHeadFormat) Config.mSettingConfig.PackageDataChkHeadFormat[i];
    		
            if(itemObj.type.equals("ChkString")){
            	
            	byte[] byteArray = itemObj.contents.getBytes(Charset.forName("utf8"));
            	System.arraycopy(byteArray, 0, PackageDataChkHead, itemObj.startPos, (byteArray.length < itemObj.length ? byteArray.length:itemObj.length)); 
            	
            }else if(itemObj.type.equals("ChkHash")){
//                var tmp = TunnelUtils.CreateHash(Config.PackageDataChkHeadFormat[i].contents);
//                (new Buffer(tmp.toString(), "Hex")).copy(PackageDataChkHead, Config.PackageDataChkHeadFormat[i].startPos, 0, (new Buffer(tmp.toString(), "Hex")).length);
            }
        }
        return PackageDataChkHead;
    }
    
    
    
	
	public void put(byte[] data,boolean isDriect){
		
		System.out.println("CustomPackage put " + data.length);
		
		if(isDriect){
			
			//Format判断処理要らない、そのまま出す
			if (data.length > 0) {
				iEventHandler.onRealDataReceivedHandler(data);
			}
			
		}else {
			//Format判断処理必要、
	        int pos = 0;
	        this.ReadCacheBuffer = concat(this.ReadCacheBuffer, data); 
	        //Check Conditions 
	        do {
//	            try {
//	                if(this.ReadCacheBuffer.length < this.PackageHead.length + this.PackageDataChkHead.length)
//	                    break;
//
//	                pos = this.getNextPackageOffset();
//	                if(pos > 0){
//	                    
//	                    //Get InfoDatas
//	                    var data : Buffer = this.ReadCacheBuffer.slice(0,pos);
//	                    this.ReadCacheBuffer = this.ReadCacheBuffer.slice(pos);
//	                    data = data.slice(this.PackageHead.length);
//	                    if(SettingConfig.PackageDataEncode.type != ''){
//	                        data = TunnelUtils.decode(data,
//	                            SettingConfig.PackageDataEncode.type,
//	                            SettingConfig.PackageDataEncode.password);
//	                    }
//	                    //PackageDataChkHead Check
//	                    if (data.indexOf(this.PackageDataChkHead) == 0)
//	                        data = data.slice(this.PackageDataChkHead.length);
//	                    else{
//	                        this.onErrorHandler('PackageDataChkHead Check Error!');
//	                        break;
//	                    }
//	                    this.onRealDataReceivedHandler(data);                    
//	                }else{
//	                    break;
//	                }
//	            } catch (error) {
//	                this.onErrorHandler('PackageHead Check Error!');
//	                //break;
//	            }
	        } while (true);
		}

	}
	
	
    public int getNextPackageOffset(){
        int posResult = 0 ;
        if(this.PackageDiffMode.equals("PackageSize")){
            //Write DataPackageSize to Head
//            posResult = this.ReadCacheBuffer.readUInt32BE(this.PackageSizeStarPos) + this.PackageHead.length;
//            if (posResult > this.ReadCacheBuffer.length){
//                posResult = -1;
//            }
        }else if(this.PackageDiffMode.equals("PackageSizeLE")){
            //Write DataPackageSize to Head
//            posResult = this.ReadCacheBuffer.readUInt32LE(this.PackageSizeStarPos) + this.PackageHead.length;
//            if (posResult > this.ReadCacheBuffer.length){
//                posResult = -1;
//            }
//        }else if(this.PackageDiffMode.equals("PackageDiff")){
//            posResult = this.ReadCacheBuffer.indexOf(this.PackageHead,1);
        }
        return posResult;
    }
    
    
	public byte[] formatData(byte[] data){
		System.out.println("CustomPackage formatData");
		return data;

	}
	
	public void setHandler(EventHandler iEventHandler){
		this.iEventHandler = iEventHandler;

	}
	
	public static byte[] concat(byte[] a, byte[] b) {  
		byte[] c= new byte[a.length+b.length];  
		   System.arraycopy(a, 0, c, 0, a.length);  
		   System.arraycopy(b, 0, c, a.length, b.length);  
		   return c;  
		}  
	
	
	public static byte[] subBytes(byte[] src, int begin, int count) {  
	    byte[] bs = new byte[count];  
	    System.arraycopy(src, begin, bs, 0, count);  
	    return bs;  
	}  

}
